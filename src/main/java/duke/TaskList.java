package duke;

import duke.task.Task;

import java.util.ArrayList;

/**
 * Class that represents a list of Tasks to be stored.
 */
public class TaskList {
    private final ArrayList<Task> tasks;

    /**
     * Default constructor that returns an empty TaskList instance.
     */
    public TaskList() {
        this.tasks = new ArrayList<>();
    };

    /**
     * Constructor that converts an ArrayList of Tasks into an instance of TaskList.
     *
     * @param tasks The corresponding ArrayList of Tasks.
     */
    public TaskList(ArrayList<Task> tasks) {
        this.tasks = tasks;
    }

    /**
     * Add a new Task to the end of the TaskList.
     *
     * @param task The Task to be added.
     */
    public void add(Task task) {
        this.tasks.add(task);
    }

    /**
     * Remove a Task from the TaskList. Note that this method uses 1-based indexing in correspondence
     * with the index generated by the printList() method.
     *
     * @param index The index of the Task to be removed.
     * @return The removed Task.
     * @throws DukeException if the index provided is out of bounds.
     */
    public Task remove(int index) throws DukeException {
        if (index < 1 || index > tasks.size()) {
            throw new DukeException(Ui.LINE + Messages.INVALID_INDEX_MESSAGE + Ui.LINE);
        }

        return this.tasks.remove(index - 1);
    }

    public int size() {
        return this.tasks.size();
    }

    /**
     * Returns the string representation of the TaskList used by the Storage class in the save files.
     *
     * @return A String of all Tasks in the TaskList.
     */
    public String getSaveString() {
        StringBuilder tempString = new StringBuilder();
        for (Task task : this.tasks) {
            tempString.append(task.getSaveString()).append(System.lineSeparator());
        }

        return tempString.toString();
    }

    /**
     * Prints the Tasks in the TaskList in a human-readable format.
     */
    public void printTasks() {
        for (int i = 0; i < this.tasks.size(); i++) {
            System.out.println((i + 1) + ". " + this.tasks.get(i));
        }
    }

    /**
     * Marks a specific Task as done.
     *
     * @param index The index of the Task.
     * @return The Task marked as done.
     * @throws DukeException if the index provided is out of bounds.
     */
    public Task markAsDone(int index) throws DukeException {
        if (index < 1 || index > tasks.size()) {
            throw new DukeException(Ui.LINE + Messages.INVALID_INDEX_MESSAGE + Ui.LINE);
        }

        Task currentTask = this.tasks.get(index - 1);
        currentTask.markAsDone();
        return currentTask;
    }

    /**
     * Marks a specific Task as undone.
     *
     * @param index The index of the Task.
     * @return The Task marked as undone.
     * @throws DukeException if the index provided is out of bounds.
     */
    public Task markAsUndone(int index) throws DukeException {
        if (index < 1 || index > tasks.size()) {
            throw new DukeException(Ui.LINE + Messages.INVALID_INDEX_MESSAGE + Ui.LINE);
        }

        Task currentTask = this.tasks.get(index - 1);
        currentTask.markAsUndone();
        return currentTask;
    }
}
